---
- name: Manage All servers
  hosts:
    - Freya
    - Hella

  pre_tasks:
    - name: Set hostname
      become: true
      ansible.builtin.hostname:
        name: "{{ hostname }}"

    - name: Upgrade system
      become: true
      community.general.pacman:
        update_cache: true
        upgrade: true

    - name: Install packages
      become: true
      community.general.pacman:
        state: present
        name:
          - base-devel
          - cronie
          - docker
          - docker-compose
          - fail2ban
          - git
          - screen
          - sshfs
          - syslog-ng
          - make
          - mc
          - net-tools
          - nfs-utils
          - prometheus-node-exporter
          - promtail
          - python
          - python-docker
          - rsync
          - vim
          - nano

    - name: Enable services
      become: true
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        - docker
        - cronie
        - fail2ban
        - prometheus-node-exporter
        - promtail
        - syslog-ng@default.service

  tasks:
    - name: Fail2ban log setting
      become: true
      ansible.builtin.lineinfile:
        path: /etc/fail2ban/fail2ban.conf
        regexp: '^logtarget'
        line: "logtarget = SYSTEMD-JOURNAL"
        owner: root
        group: root
        mode: '0744'
      notify: Fail2ban service restart

    - name: Copy sshd jail config
      become: true
      ansible.builtin.copy:
        src: "files/{{ hostname }}/sshd.local"
        dest: /etc/fail2ban/jail.d/sshd.local
        owner: root
        group: root
        mode: '0770'
      notify: Fail2ban service restart

    - name: Journald persist setting
      become: true
      ansible.builtin.lineinfile:
        path: /etc/systemd/journald.conf
        insertafter: '^[Journal]'
        line: "Storage=persistent"
        owner: root
        group: root
        mode: '0744'
      notify: Journald service restart

    - name: Copy syslog-ng config
      become: true
      ansible.builtin.copy:
        src: files/{{ hostname }}/syslog-ng.conf
        dest: /etc/syslog-ng/syslog-ng.conf
        owner: root
        group: root
        mode: '0755'
      notify: Restart syslog-ng

  handlers:
    - name: Fail2ban service restart
      become: true
      ansible.builtin.service:
        name: fail2ban
        state: restarted
        enabled: true

    - name: Journald service restart
      become: true
      ansible.builtin.service:
        name: systemd-journald
        state: restarted

    - name: Restart syslog-ng
      become: true
      ansible.builtin.service:
        name: syslog-ng@default.service
        state: restarted

- name: Manage Freya
  hosts:
    - Freya

  vars:
    dockercomposerpath: /srv/docker

  pre_tasks:
    - name: Install packages
      become: true
      community.general.pacman:
        state: present
        name:
          - transmission-cli
          - fakeroot
          - samba

  roles:
    - { role: andrewrothstein.k3d, become: true }
    - { role: andrewrothstein.kubernetes-helm, become: true }
    - { role: andrewrothstein.kubectl, become: true }

  tasks:
    - name: Create /root/bin
      become: true
      ansible.builtin.file:
        path: /root/bin
        state: directory
        mode: "0755"

# DUCKDNS
    - name: Copy duck script
      become: true
      ansible.builtin.copy:
        src: "files/{{ hostname }}/duck.sh"
        dest: /root/bin/duck.sh
        owner: root
        group: root
        mode: '0700'

    - name: Duckdns schedule
      become: true
      ansible.builtin.cron:
        name: "Duckdns"
        minute: "*/15"
        job: "bash /root/bin/duck.sh >/dev/null 2>&1"

# SAMBA
    - name: Copy samba config
      become: true
      ansible.builtin.copy:
        src: "files/{{ hostname }}/smb.conf"
        dest: /etc/samba/smb.conf
        owner: root
        group: root
        mode: '0770'
      notify:
        - Smb-service-restart
        - Nmb-service-restart

    - name: Add nfs exports
      become: true
      ansible.builtin.copy:
        src: "files/{{ hostname }}/exports"
        dest: /etc/exports
        owner: root
        group: root
        mode: '0770'
      notify: Reload nfs exports

    - name: NFS-service
      become: true
      ansible.builtin.service:
        name: nfs-server
        state: started
        enabled: true

# Folders to create
    - name: Create vault group
      become: true
      ansible.builtin.group:
        name: vault
        state: present

    - name: Create directories
      become: true
      ansible.builtin.file:
        path: "{{ item.path }}"
        mode: "{{ item.mode }}"
        owner: "{{ item.owner }}"
        state: directory
      loop:
        - { path: "/storage01", mode: "0777", owner: "root"}
        - { path: "/storage01/calibredb", mode: "0777", owner: "root"}
        - { path: "/storage01/calibreweb", mode: "0777", owner: "root"}
        - { path: "/storage01/calibreweb/books", mode: "0777", owner: "root"}
        - { path: "/storage01/calibreweb/config", mode: "0777", owner: "root"}
        - { path: "/storage01/loki", mode: "0777", owner: "root"}
        - { path: "/storage01/gitlab/storage", mode: "0777", owner: "root"}
        - { path: "/storage02", mode: "0777", owner: "root"}
        - { path: "/storage03", mode: "0777", owner: "root"}
        - { path: "/storage02/torrent/downloaded", mode: "0777", owner: "root"}
        - { path: "/storage02/torrent/incomplette", mode: "0777", owner: "root"}
        - { path: "/storage02/torrent/toDownload", mode: "0777", owner: "root"}
        - { path: "/etc/transmission-daemon", mode: "0775", owner: "transmission"}
        - { path: "/storage03", mode: "0777", owner: "root"}
        - { path: "/storage03", mode: "0777", owner: "root"}
        - { path: "{{ dockercomposerpath }}", mode: "0777", owner: "root"}
        - { path: "/srv/ingress", mode: "0755", owner: "root"}
        - { path: "/srv/mosquitto", mode: "0755", owner: "root"}
        - { path: "/srv/grafana", mode: "0755", owner: "root"}
        - { path: "/srv/prometheus", mode: "0755", owner: "root"}
        - { path: "/srv/proxysetting", mode: "0755", owner: "root"}
        - { path: "/srv/squid", mode: "0755", owner: "root"}
        - { path: "/srv/squid/log", mode: "0777", owner: "root"}
        - { path: "/srv/squid/data", mode: "0777", owner: "root"}
        - { path: "/srv/squid/configsnippet", mode: "0777", owner: "root"}

    - name: Copying files
      become: true
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "root"
        mode: "0755"
      loop:
        - { src: "files/Freya/mosquitto.conf", dest: "/srv/mosquitto/mosquitto.conf" }
        - { src: "files/Freya/passwd.conf", dest: "/srv/mosquitto/passwd.conf" }
        - { src: "files/Freya/alerts.yml", dest: "/srv/prometheus/alerts.yml" }
        - { src: "files/Freya/wpad.dat", dest: "/srv/proxysetting/wpad.dat" }

    - name: Copy prometheus config
      become: true
      ansible.builtin.copy:
        src: files/{{ hostname }}/prometheus.yml
        dest: /srv/prometheus/prometheus.yml
        owner: root
        group: root
        mode: '0775'
      notify: Restart prometheus

    - name: Copy promtail config
      become: true
      ansible.builtin.copy:
        src: files/{{ hostname }}/promtail.yaml
        dest: /etc/loki/promtail.yaml
        owner: promtail
        group: root
        mode: '0770'
      notify: Restart promtail

    - name: Stop transmission-service
      become: true
      ansible.builtin.service:
        name: transmission
        state: stopped
        enabled: true

    - name: Set the transmission config dit to /etc
      become: true
      ansible.builtin.lineinfile:
        path: /usr/lib/systemd/system/transmission.service
        regexp: '^ExecStart'
        line: ExecStart=/usr/bin/transmission-daemon -f --log-level=info -g /etc/transmission-daemon

    - name: Copy transmission config
      become: true
      ansible.builtin.copy:
        src: files/{{ hostname }}/transsettings.json
        dest: /etc/transmission-daemon/settings.json
        owner: transmission
        group: root
        mode: '0770'
      register: transmissionconfig

    - name: Start transmission-service
      become: true
      ansible.builtin.service:
        name: transmission
        state: started
        enabled: true
        daemon_reload: true

# XMLDownload

    - name: Root/bin
      become: true
      ansible.builtin.file:
        path: /root/bin
        state: directory
        mode: '0770'
        owner: root

    - name: Get XMLDownload
      become: true
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/szemere/XMLDownload/master/XMLDownload.py
        dest: /root/bin/XMLDownload.py
        mode: '0770'

    - name: XMLDownload schedule
      become: true
      ansible.builtin.cron:
        name: "XMLDownload"
        minute: "*/5"
        job: >-
          python /root/bin/XMLDownload.py --db /root/XMLDownload.db
          --cache /root/rss.xml
          --file /storage02/torrent/toDownload/
          --rss https://ncore.pro/bookmarks/fcc9f495abbd4b4a10c1ca5d759e8491113707 >/dev/null 2>&1

# create aur_builder to install aur packages
    - name: Create the `aur_builder` user
      become: true
      ansible.builtin.user:
        name: aur_builder
        create_home: true
        group: wheel

    - name: Allow the `aur_builder` user to run `sudo pacman` without a password
      become: true
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/11-install-aur_builder
        line: 'aur_builder ALL=(ALL) NOPASSWD: /usr/bin/pacman'
        mode: '0700'
        create: true
        validate: 'visudo -cf %s'

# WSDD2
    - name: Install wsdd2
      kewlfft.aur.aur:
        name: wsdd2
        use: makepkg
        state: present
        ignore_arch: true
      become: true
      become_user: aur_builder

    - name: WSDD config
      become: true
      ansible.builtin.lineinfile:
        path: /etc/wsdd.conf
        regexp: '^WSDD_PARAMS='
        line: "WSDD_PARAMS=-n freya.int.zxyxy.net -p -H 4"
        mode: '0644'
        create: true
      notify: Wsdd service restart

    - name: Enable services
      become: true
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        - smb
        - nmb
        - wsdd2

    - name: Add docker compose file
      become: true
      ansible.builtin.copy:
        src: "files/{{ hostname }}/docker-compose.yaml"
        dest: "{{ dockercomposerpath }}/docker-compose.yaml"
        owner: root
        group: root
        mode: '0770'
        decrypt: true
      notify: Docker-compose run

    - name: Copying nginx config
      become: true
      ansible.builtin.copy:
        src: "files/Freya/nginxdefault.conf"
        dest: "/srv/ingress/default.conf"
        owner: "root"
        mode: "0755"
      notify: Restart nginx

  handlers:
    - name: Fail2ban service restart
      become: true
      ansible.builtin.service:
        name: fail2ban
        state: restarted
        enabled: true

    - name: Smb-service-restart
      become: true
      ansible.builtin.service:
        name: smb
        state: restarted
        enabled: true

    - name: Nmb-service-restart
      become: true
      ansible.builtin.service:
        name: nmb
        state: restarted
        enabled: true

    - name: Reload nfs exports
      become: true
      ansible.builtin.command:
        cmd: /usr/bin/exportfs -arv
      register: out
      changed_when: out.rc != 0

    - name: Wsdd service restart
      become: true
      ansible.builtin.service:
        name: wsdd2
        state: restarted

    - name: Docker-compose run
      become: true
      ansible.builtin.command: "docker-compose up -d"
      args:
        chdir: "{{ dockercomposerpath }}"
      register: out
      changed_when: out.rc != 0

    - name: Restart promtail
      become: true
      ansible.builtin.service:
        name: promtail
        state: restarted

    - name: Restart prometheus
      become: true
      ansible.builtin.command: "docker-compose restart -t 10 prometheus"
      args:
        chdir: "{{ dockercomposerpath }}"
      register: out
      changed_when: out.rc != 0

    - name: Restart syslog-ng
      become: true
      ansible.builtin.service:
        name: syslog-ng@default.service
        state: restarted

- name: Manage Hella
  hosts:
    - Hella

  vars:
    dockercomposerpath: /srv/docker

  tasks:
    - name: Create directories
      become: true
      ansible.builtin.file:
        path: "{{ item.path }}"
        mode: "{{ item.mode }}"
        owner: "{{ item.owner }}"
        state: directory
      loop:
        - { path: "{{ dockercomposerpath }}", mode: "0777", owner: "root"}
        - { path: "/srv/ingress", mode: "0755", owner: "root"}
        - { path: "/srv/mosquitto", mode: "0755", owner: "root"}
        - { path: "/srv/grafana", mode: "0755", owner: "root"}
        - { path: "/srv/prometheus", mode: "0755", owner: "root"}
        - { path: "/srv/proxysetting", mode: "0755", owner: "root"}
        - { path: "/storage01/squid", mode: "0755", owner: "root"}
        - { path: "/storage01/squid/log", mode: "0777", owner: "root"}
        - { path: "/storage01/squid/data", mode: "0777", owner: "root"}
        - { path: "/storage01/squid/configsnippet", mode: "0777", owner: "root"}

    - name: Copying files
      become: true
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "root"
        mode: "0755"
      loop:
        - { src: "files/Hella/mosquitto.conf", dest: "/srv/mosquitto/mosquitto.conf" }
        - { src: "files/Hella/passwd.conf", dest: "/srv/mosquitto/passwd.conf" }
        - { src: "files/Hella/wpad.dat", dest: "/srv/proxysetting/wpad.dat" }

    - name: Copying nginx config
      become: true
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "root"
        mode: "0755"
      loop:
        - src: "files/{{ hostname }}/nginxdefault.conf"
          dest: "/srv/ingress/default.conf"
        - src: "files/{{ hostname }}/nginx.conf"
          dest: "/srv/nginx.conf"

      notify: Restart nginx

    - name: Add docker compose file
      become: true
      ansible.builtin.copy:
        src: "files/{{ hostname }}/docker-compose.yaml"
        dest: "{{ dockercomposerpath }}/docker-compose.yaml"
        owner: root
        group: root
        mode: '0770'
        decrypt: true
      notify: Docker-compose run

    - name: Copy promtail config
      become: true
      ansible.builtin.copy:
        src: files/{{ hostname }}/promtail.yaml
        dest: /etc/loki/promtail.yaml
        owner: promtail
        group: root
        mode: '0770'
      notify: Restart promtail

  handlers:
    - name: Docker-compose run
      become: true
      ansible.builtin.command: "docker-compose up -d"
      args:
        chdir: "{{ dockercomposerpath }}"
      register: out
      changed_when: out.rc != 0

    - name: Restart nginx
      become: true
      ansible.builtin.command: "docker-compose restart -t 10 nginx"
      args:
        chdir: "{{ dockercomposerpath }}"
      register: out
      changed_when: out.rc != 0

    - name: Restart promtail
      become: true
      ansible.builtin.service:
        name: promtail
        state: restarted

- name: Manage vmrouter
  hosts:
    - vmrouter

  pre_tasks:
    - name: Set hostname
      community.routeros.command:
        commands:
          - /system identity set name="{{ inventory_hostname }}"
